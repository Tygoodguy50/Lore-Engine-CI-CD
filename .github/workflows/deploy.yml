name: 🔮 Lore Engine Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.21'
  CACHE_ENABLED: 'false'
  ACTIONS_CACHE_URL: ''
  ACTIONS_RUNTIME_URL: ''
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Build and test the application
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    env:
      CACHE_ENABLED: 'false'
      GO_VERSION: '1.21'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏗️ Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 🔍 Debug environment
      run: |
        echo "CACHE_ENABLED=${{ env.CACHE_ENABLED }}"
        echo "GO_VERSION=${{ env.GO_VERSION }}"
        echo "Working directory: $(pwd)"
        echo "Available disk space: $(df -h . | tail -1)"
      continue-on-error: true

    - name: 🔍 Lint Go code
      run: |
        go fmt ./...
        go vet ./...
        if [ -n "$(go fmt ./...)" ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          exit 1
        fi

    - name: 🧪 Run tests
      run: |
        echo "Running Go tests..."
        go test ./... -v -race -timeout=30m

    - name: 🔨 Build application
      run: |
        echo "Building application with Go..."
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o local-ai ./cmd/local-ai
        echo "Build successful!"
        ls -la local-ai

    - name: 🔍 Verify build artifacts
      run: |
        ls -la ./
        file local-ai

    - name: 📊 Generate build report
      run: |
        echo "## 🔨 Build Report" > build-report.md
        echo "- **Timestamp**: $(date)" >> build-report.md
        echo "- **Commit**: ${{ github.sha }}" >> build-report.md
        echo "- **Branch**: ${{ github.ref_name }}" >> build-report.md
        echo "- **Go Version**: $(go version)" >> build-report.md
        echo "- **Build Status**: ✅ SUCCESS" >> build-report.md

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lore-engine-${{ github.sha }}
        path: |
          local-ai
          build-report.md
        retention-days: 30

    - name: 🚨 Notify Discord on failure
      if: failure()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -n "$DISCORD_WEBHOOK" ]; then
          curl -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "🚨 Lore Engine Build Failed",
              "description": "Build failed for commit `${{ github.sha || 'unknown' }}`",
              "color": 15158332,
              "fields": [
                {"name": "Branch", "value": "${{ github.ref_name || 'unknown' }}", "inline": true},
                {"name": "Commit", "value": "${{ github.sha || 'unknown' }}", "inline": true},
                {"name": "Workflow", "value": "${{ github.workflow || 'unknown' }}", "inline": true},
                {"name": "Cache Status", "value": "${{ env.CACHE_ENABLED }}", "inline": true}
              ],
              "footer": {"text": "Lore Engine CI/CD"}
            }]
          }' "$DISCORD_WEBHOOK"
        else
          echo "Discord webhook not configured, skipping notification"
        fi
      continue-on-error: true

  # Security scanning
  security-scan:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      security-events: write
      actions: read
    env:
      CACHE_ENABLED: 'false'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        echo "$HOME/go/bin" >> $GITHUB_PATH
        export PATH=$PATH:$HOME/go/bin
        # Run with pretty output for logs
        gosec -fmt=pretty ./...
        # Run with SARIF output for upload
        gosec -fmt sarif -out gosec.sarif ./...

    - name: 📊 Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
      continue-on-error: true

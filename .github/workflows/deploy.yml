name: "Haunted Empire Frontend CI/CD"
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets (non-fatal)
        id: secrets_check
        run: |
          echo "Checking core deployment secrets..."
          [ -z "${{ secrets.NETLIFY_AUTH_TOKEN }}" ] && echo "::warning::NETLIFY_AUTH_TOKEN missing" || echo "NETLIFY_AUTH_TOKEN present" 
          [ -z "${{ secrets.NETLIFY_SITE_ID }}" ] && echo "::warning::NETLIFY_SITE_ID missing" || echo "NETLIFY_SITE_ID present"
          # TOKEN_RELEASE_GITHUB intentionally not warned to reduce lint noise (release step is conditionally gated)
          # GITHUB_TOKEN auto-injected; no hard fail if blank in lint context
          echo "Secret validation complete (non-fatal)."

      - name: Purge Netlify Cache
        if: success()
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.NETLIFY_AUTH_TOKEN }}" \
            https://api.netlify.com/api/v1/sites/${{ secrets.NETLIFY_SITE_ID }}/purge_cache

      - name: Validate Public URLs
        run: |
          curl -sSf https://charming-llama-c1e5db.netlify.app | grep Haunted
          curl -sSf https://charming-llama-c1e5db.netlify.app/contact.html | grep Contact

      - name: Set Release Tag
        id: set_tag
        run: echo "TAG=deploy-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: ${{ success() && secrets.TOKEN_RELEASE_GITHUB != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: Automated Deploy ${{ env.TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_RELEASE_GITHUB }}

  # (Notifications moved to after deployment & health checks)

  # (Checkout moved to top)

      - name: Install stylelint config
        run: npm install --no-save stylelint-config-standard

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (if any)
        run: |
          echo "No dependencies for static site"

      - name: Lint HTML/CSS/JS
        run: |
          npx htmlhint index.html
          npx stylelint style.css
          npx eslint main.js || true


      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Deploy to Netlify (CLI)
        run: |
          NETLIFY_AUTH_TOKEN=$(echo '${{ secrets.NETLIFY_AUTH_TOKEN }}')
          NETLIFY_SITE_ID=$(echo '${{ secrets.NETLIFY_SITE_ID }}')
          if [ -z "$NETLIFY_AUTH_TOKEN" ] || [ -z "$NETLIFY_SITE_ID" ]; then
            echo "::error::Missing NETLIFY_AUTH_TOKEN or NETLIFY_SITE_ID; cannot deploy"; exit 1; fi
          echo "Deploying to Netlify site $NETLIFY_SITE_ID ..."
          msg="Automated deploy"
          if [ -n "$TAG" ]; then msg="Automated deploy $TAG"; fi
          netlify deploy --auth "$NETLIFY_AUTH_TOKEN" --dir=. --site "$NETLIFY_SITE_ID" --prod --message "$msg"
          echo "Netlify deploy complete."

      - name: Wait for Netlify site to be live (Health Check)
        run: |
          echo "Waiting for Netlify site to be live..."
          for i in {1..15}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" https://charming-llama-c1e5db.netlify.app)
            if [ "$status" = "200" ]; then
              echo "Site is live!"
              exit 0
            fi
            echo "Attempt $i: Site not live yet (HTTP $status). Waiting 10s..."
            sleep 10
          done
          echo "Netlify site did not become live in time. Exiting."
          exit 1

      - name: Render Backend Health Check
        run: |
          RENDER_BACKEND_URL=$(echo '${{ secrets.RENDER_BACKEND_URL }}')
          echo "Checking Render backend health at ${RENDER_BACKEND_URL}/health..."
          for i in {1..10}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" "$RENDER_BACKEND_URL/health")
            if [ "$status" = "200" ]; then
              echo "Render backend is live!"
              exit 0
            fi
            echo "Attempt $i: Backend not live yet (HTTP $status). Waiting 10s..."
            sleep 10
          done
          echo "Render backend did not become live in time. Exiting."
          exit 1

      - name: Lighthouse CI Audit
        run: |
          npm install -g @lhci/cli
          lhci autorun --collect.url=https://charming-llama-c1e5db.netlify.app --upload.target=temporary-public-storage || exit 1

      - name: Trigger Referral Bonus Automation
        if: success()
        env:
          BACKEND_URL: ${{ secrets.BACKEND_API_URL }}
        run: |
          curl -sSf "$BACKEND_URL/api/trigger-referral-bonus"

      - name: Generate Discount Code
        if: success()
        env:
          BACKEND_URL: ${{ secrets.BACKEND_API_URL }}
        run: |
          curl -sSf "$BACKEND_URL/api/generate-discount" | tee discount.json

      - name: Email Campaigns (Welcome, Discount, Reward)
        if: success()
        run: |
          MAILGUN_API_KEY=$(echo '${{ secrets.MAILGUN_API_KEY }}')
          PROD_USER_EMAIL=$(echo '${{ secrets.PROD_USER_EMAIL }}')
          BACKEND_URL=$(echo '${{ secrets.BACKEND_API_URL }}')
          NETLIFY_SITE_ID=$(echo '${{ secrets.NETLIFY_SITE_ID }}')
          site="https://${NETLIFY_SITE_ID}.netlify.app"
          if [ -z "$MAILGUN_API_KEY" ]; then echo "Mailgun key missing - skipping emails"; exit 0; fi
          mg(){ curl -s -X POST https://api.mailgun.net/v3/mg.phantomgear.it.com/messages -u "api:$MAILGUN_API_KEY" "$@" >/dev/null || true; }
          safe_jq(){ command -v jq >/dev/null 2>&1 && jq -r "$1" || cat; }

          # Welcome email (static) if prod user defined
          if [ -n "$PROD_USER_EMAIL" ]; then
            mg -F from='Haunted Empire <postmaster@mg.phantomgear.it.com>' \
               -F to="$PROD_USER_EMAIL" \
               -F subject='Welcome to Haunted Empire!' \
               -F text="Thanks for joining! Explore the realm: $site"
          fi

          # Discount code email if file exists
          if [ -f discount.json ] && command -v jq >/dev/null 2>&1; then
            code=$(jq -r .code discount.json 2>/dev/null || echo "")
            if [ -n "$code" ] && [ -n "$PROD_USER_EMAIL" ]; then
              mg -F from='Haunted Empire <postmaster@mg.phantomgear.it.com>' \
                 -F to="$PROD_USER_EMAIL" \
                 -F subject='Your Haunted Empire Discount Code' \
                 -F text="Use code $code for a special discount at $site"
            fi
          fi

          # Reward email - dynamic recipient
          if [ -n "$BACKEND_URL" ]; then
            reward_json=$(curl -s "$BACKEND_URL/api/reward-latest" || true)
            if command -v jq >/dev/null 2>&1 && [ -n "$reward_json" ]; then
              reward=$(echo "$reward_json" | jq -r .reward)
              recipient=$(echo "$reward_json" | jq -r .email)
              if [ "$reward" != "null" ] && [ -n "$recipient" ] && [ "$recipient" != "null" ]; then
                mg -F from='Haunted Empire <postmaster@mg.phantomgear.it.com>' \
                   -F to="$recipient" \
                   -F subject='You Earned a Haunted Empire Reward!' \
                   -F text="Congratulations! You've earned: $reward. Keep referring friends to earn even more."
              fi
            fi
          fi
          echo "Email campaigns complete."

  # (Removed standalone Milestone Notification - folded into consolidated success notifications later)

      - name: Monetization Guardrails - Validate Stripe Webhook
        env:
          BACKEND_URL: ${{ secrets.BACKEND_API_URL }}
        run: |
          echo "Checking Stripe webhook status at $BACKEND_URL/api/stripe-webhook-status..."
          status=$(curl -s -o /dev/null -w "%{http_code}" "$BACKEND_URL/api/stripe-webhook-status")
          if [ "$status" = "200" ]; then
            curl -sSf "$BACKEND_URL/api/stripe-webhook-status" | grep '"ok":true'
          else
            echo "Stripe webhook status endpoint not available (HTTP $status). Skipping check."
          fi

      - name: Monetization Guardrails - Validate Referral Logic
        env:
          BACKEND_URL: ${{ secrets.BACKEND_API_URL }}
        run: |
          curl -sSf "$BACKEND_URL/api/referral-test" | grep '"ok":true'

      - name: Monetization Guardrails - Validate Payout Logic
        env:
          BACKEND_URL: ${{ secrets.BACKEND_API_URL }}
        run: |
          curl -sSf "$BACKEND_URL/api/payout-test" | grep '"ok":true'

  # (Removed duplicate final Netlify sync - single deploy earlier)
        # Required secrets:
        # - NETLIFY_AUTH_TOKEN: Netlify personal access token
        # - NETLIFY_SITE_ID: Netlify site ID
        # - GITHUB_TOKEN: GitHub Actions token


      - name: Google Analytics Event (Deployment)
        if: success() && env.GA_MEASUREMENT_ID != '' && env.GA_API_SECRET != ''
        env:
          GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}
          GA_API_SECRET: ${{ secrets.GA_API_SECRET }}
        run: |
          curl -X POST "https://www.google-analytics.com/mp/collect?measurement_id=$GA_MEASUREMENT_ID&api_secret=$GA_API_SECRET" \
            -H "Content-Type: application/json" \
            -d '{
                  "client_id": "deployment-bot-001",
                  "events": [{
                    "name": "deployment_success",
                    "params": {
                      "site": "https://${{ secrets.NETLIFY_SITE_ID }}.netlify.app",
                      "platform": "github_actions"
                    }
                  }]
                }'

      - name: Facebook Pixel Event (Deployment)
        if: success() && env.FB_PIXEL_ID != '' && env.FB_PIXEL_ACCESS_TOKEN != ''
        env:
          FB_PIXEL_ID: ${{ secrets.FB_PIXEL_ID }}
          FB_PIXEL_ACCESS_TOKEN: ${{ secrets.FB_PIXEL_ACCESS_TOKEN }}
        run: |
          curl -X POST "https://graph.facebook.com/v19.0/$FB_PIXEL_ID/events?access_token=$FB_PIXEL_ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
                  "data": [{
                    "event_name": "DeploymentSuccess",
                    "event_time": '$(date +%s)',
                    "action_source": "system_generated",
                    "event_source_url": "https://${{ secrets.NETLIFY_SITE_ID }}.netlify.app"
                  }]
                }'

      - name: Consolidated Success Notifications
        if: ${{ success() }}
        uses: ./.github/actions/consolidated-notifications

      # - name: Post-Deploy Monetization Test
      #   env:
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      #   run: |
      #     curl -sSf https://${NETLIFY_SITE_ID}.netlify.app/api/leaderboard | grep 'earnings'

  # (Removed numerous granular social/email notification steps now consolidated later)

      - name: Failure Notifications
        if: ${{ failure() }}
        run: |
          SLACK_WEBHOOK_URL=$(echo '${{ secrets.SLACK_WEBHOOK_URL }}')
          DISCORD_WEBHOOK_URL=$(echo '${{ secrets.DISCORD_WEBHOOK_URL }}')
          echo "Deployment failed."
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -s -X POST -H 'Content-type: application/json' --data '{"text":"Haunted Empire deployment failed. Immediate attention required!"}' "$SLACK_WEBHOOK_URL" || true
          fi
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -s -X POST -H 'Content-Type: application/json' --data '{"content":"Deployment failed. Investigate CI logs."}' "$DISCORD_WEBHOOK_URL" || true
  

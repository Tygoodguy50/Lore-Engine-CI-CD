name: üîÆ Lore Engine Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.21'
  BAZEL_VERSION: '7.0.0'

jobs:
  # Build and test the application
  build-and-test:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üèóÔ∏è Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: üîß Setup Bazel
      uses: bazelbuild/setup-bazelisk@v2
      with:
        bazelisk-version: latest

    - name: üì¶ Cache Bazel
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazelisk
        key: ${{ runner.os }}-bazel-${{ hashFiles('**/BUILD.bazel', '**/WORKSPACE', '**/MODULE.bazel') }}
        restore-keys: |
          ${{ runner.os }}-bazel-

    - name: üîç Lint Go code
      run: |
        go fmt ./...
        go vet ./...
        if [ -n "$(go fmt ./...)" ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          exit 1
        fi

    - name: üß™ Run tests
      run: |
        bazel test //...

    - name: üî® Build application
      run: |
        bazel build //:local-ai
        
    - name: üîç Verify build artifacts
      run: |
        ls -la bazel-bin/
        file bazel-bin/local-ai

    - name: üìä Generate build report
      run: |
        echo "## üî® Build Report" > build-report.md
        echo "- **Timestamp**: $(date)" >> build-report.md
        echo "- **Commit**: ${{ github.sha }}" >> build-report.md
        echo "- **Branch**: ${{ github.ref_name }}" >> build-report.md
        echo "- **Go Version**: $(go version)" >> build-report.md
        echo "- **Bazel Version**: $(bazel version | head -1)" >> build-report.md
        echo "- **Build Status**: ‚úÖ SUCCESS" >> build-report.md
        
    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lore-engine-${{ github.sha }}
        path: |
          bazel-bin/local-ai
          build-report.md
        retention-days: 30

    - name: üö® Notify Discord on failure
      if: failure()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        curl -H "Content-Type: application/json" \
        -d '{
          "embeds": [{
            "title": "üö® Lore Engine Build Failed",
            "description": "Build failed for commit `${{ github.sha }}`",
            "color": 15158332,
            "fields": [
              {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
              {"name": "Commit", "value": "${{ github.sha }}", "inline": true},
              {"name": "Workflow", "value": "${{ github.workflow }}", "inline": true}
            ],
            "footer": {"text": "Lore Engine CI/CD"}
          }]
        }' \
        $DISCORD_WEBHOOK

  # Security scanning
  security-scan:
    name: üîê Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîê Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'

    - name: üìä Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  # Deploy to staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup Bazel
      uses: bazelbuild/setup-bazelisk@v2

    - name: üî® Build for staging
      run: |
        bazel build //:local-ai

    - name: üöÄ Deploy to staging server
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$STAGING_KEY" > ~/.ssh/staging_key
        chmod 600 ~/.ssh/staging_key
        
        # Copy files to staging
        scp -i ~/.ssh/staging_key -o StrictHostKeyChecking=no \
          bazel-bin/local-ai \
          .env.staging \
          launch.sh \
          deploy-community-api.sh \
          $STAGING_USER@$STAGING_HOST:/opt/lore-engine/
        
        # Deploy on staging server
        ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no \
          $STAGING_USER@$STAGING_HOST \
          "cd /opt/lore-engine && \
           chmod +x launch.sh deploy-community-api.sh local-ai && \
           ./launch.sh --env=staging --build-only && \
           sudo systemctl restart lore-engine-staging"

    - name: üß™ Run staging health check
      run: |
        sleep 30
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.STAGING_HOST }}:8081/health)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Staging deployment successful"
        else
          echo "‚ùå Staging deployment failed (HTTP $response)"
          exit 1
        fi

    - name: üì¢ Notify Discord - Staging Deploy
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        curl -H "Content-Type: application/json" \
        -d '{
          "embeds": [{
            "title": "üöÄ Lore Engine Deployed to Staging",
            "description": "New lore logic has been deployed to staging environment",
            "color": 3447003,
            "fields": [
              {"name": "Environment", "value": "Staging", "inline": true},
              {"name": "Commit", "value": "${{ github.sha }}", "inline": true},
              {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
              {"name": "URL", "value": "http://${{ secrets.STAGING_HOST }}:8081", "inline": false}
            ],
            "footer": {"text": "Lore Engine CI/CD"}
          }]
        }' \
        $DISCORD_WEBHOOK

  # Deploy to production
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup Bazel
      uses: bazelbuild/setup-bazelisk@v2

    - name: üî® Build for production
      run: |
        bazel build //:local-ai --config=release

    - name: üèóÔ∏è Create deployment package
      run: |
        mkdir -p deployment
        cp bazel-bin/local-ai deployment/
        cp .env.production deployment/
        cp launch.sh deployment/
        cp deploy-community-api.sh deployment/
        cp -r docs deployment/
        cp -r config deployment/
        cp -r public deployment/
        tar -czf lore-engine-${{ github.sha }}.tar.gz deployment/

    - name: üì§ Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: lore-engine-production-${{ github.sha }}
        path: lore-engine-${{ github.sha }}.tar.gz

    - name: üöÄ Deploy to production server
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_USER: ${{ secrets.PROD_USER }}
        PROD_KEY: ${{ secrets.PROD_SSH_KEY }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$PROD_KEY" > ~/.ssh/prod_key
        chmod 600 ~/.ssh/prod_key
        
        # Copy deployment package
        scp -i ~/.ssh/prod_key -o StrictHostKeyChecking=no \
          lore-engine-${{ github.sha }}.tar.gz \
          $PROD_USER@$PROD_HOST:/opt/lore-engine/
        
        # Deploy on production server
        ssh -i ~/.ssh/prod_key -o StrictHostKeyChecking=no \
          $PROD_USER@$PROD_HOST \
          "cd /opt/lore-engine && \
           tar -xzf lore-engine-${{ github.sha }}.tar.gz && \
           cp deployment/* . && \
           chmod +x launch.sh deploy-community-api.sh local-ai && \
           ./launch.sh --health-check && \
           sudo systemctl restart lore-engine-production"

    - name: üß™ Run production health check
      run: |
        sleep 30
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.PROD_HOST }}:8080/health)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Production deployment successful"
        else
          echo "‚ùå Production deployment failed (HTTP $response)"
          exit 1
        fi

    - name: üéâ Notify Discord - Production Deploy
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        curl -H "Content-Type: application/json" \
        -d '{
          "embeds": [{
            "title": "üîÆ The Lore Engine Has Awakened!",
            "description": "New lore logic has been deployed to production! The engine continues to evolve.",
            "color": 10181046,
            "fields": [
              {"name": "Environment", "value": "Production", "inline": true},
              {"name": "Commit", "value": "${{ github.sha }}", "inline": true},
              {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
              {"name": "URL", "value": "http://${{ secrets.PROD_HOST }}:8080", "inline": false},
              {"name": "Dashboard", "value": "http://${{ secrets.PROD_HOST }}:8080/dashboard", "inline": false}
            ],
            "footer": {"text": "Lore Engine CI/CD - Production Ready"}
          }]
        }' \
        $DISCORD_WEBHOOK

  # Container build and push
  container-build:
    name: üê≥ Build Container
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üèóÔ∏è Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîê Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: üè∑Ô∏è Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: üî® Build and push container
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Performance testing
  performance-test:
    name: ‚ö° Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üèóÔ∏è Setup Node.js for k6
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: üì¶ Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: üß™ Run performance tests
      run: |
        cat > performance-test.js << EOF
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export let options = {
          stages: [
            { duration: '30s', target: 10 },
            { duration: '1m', target: 50 },
            { duration: '30s', target: 0 },
          ],
        };

        export default function() {
          let response = http.get('http://${{ secrets.STAGING_HOST }}:8081/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          
          response = http.get('http://${{ secrets.STAGING_HOST }}:8081/lore/stats');
          check(response, {
            'stats endpoint works': (r) => r.status === 200,
          });
          
          sleep(1);
        }
        EOF
        
        k6 run performance-test.js

    - name: üìä Generate performance report
      run: |
        echo "## ‚ö° Performance Test Report" > performance-report.md
        echo "- **Test Duration**: 2 minutes" >> performance-report.md
        echo "- **Max Virtual Users**: 50" >> performance-report.md
        echo "- **Target Environment**: Staging" >> performance-report.md
        echo "- **Test Status**: ‚úÖ PASSED" >> performance-report.md

    - name: üì§ Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report-${{ github.sha }}
        path: performance-report.md

  # Release notification
  release-notification:
    name: üì¢ Release Notification
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'release'
    
    steps:
    - name: üéä Notify Discord - New Release
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        curl -H "Content-Type: application/json" \
        -d '{
          "embeds": [{
            "title": "üéâ New Lore Engine Release!",
            "description": "A new version of the Lore Engine has been released!",
            "color": 5763719,
            "fields": [
              {"name": "Version", "value": "${{ github.event.release.tag_name }}", "inline": true},
              {"name": "Release", "value": "${{ github.event.release.name }}", "inline": true},
              {"name": "Environment", "value": "Production", "inline": true},
              {"name": "Release Notes", "value": "${{ github.event.release.html_url }}", "inline": false}
            ],
            "footer": {"text": "Lore Engine Release System"}
          }]
        }' \
        $DISCORD_WEBHOOK

    - name: üì± Notify community channels
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        curl -H "Content-Type: application/json" \
        -d '{
          "content": "üîÆ **THE LORE ENGINE HAS EVOLVED!** üîÆ\n\nVersion `${{ github.event.release.tag_name }}` is now live in production!\n\n**What'\''s New:**\n- Enhanced conflict detection\n- Improved interactive looping\n- Better community APIs\n- Performance optimizations\n\n**Try it now:** http://${{ secrets.PROD_HOST }}:8080\n\n#LoreEngine #ProductionReady #CommunityUpdate"
        }' \
        $DISCORD_WEBHOOK

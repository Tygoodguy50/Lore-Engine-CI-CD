name: Backend Health (Self-Hosted)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 5 * * 1' # Weekly Monday 05:00 UTC health check

jobs:
  health:
    # Expect a self-hosted runner with PowerShell & Node available. Adjust labels as needed.
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show environment port vars (debug)
        shell: pwsh
        run: |
          Write-Host "BACKEND_PORT=$env:BACKEND_PORT"
          Write-Host "LOCALAI_PORT=$env:LOCALAI_PORT"
          Write-Host "HEALTH_PORTS=$env:HEALTH_PORTS"

      - name: Run health-check script
        shell: pwsh
        run: |
          ./scripts/health-check.ps1 -TimeoutSeconds 75

      - name: Upload health artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-check-result
          path: HEALTH_CHECK_RESULT.txt

      - name: Failure notification (Discord)
        if: failure() && env.DISCORD_WEBHOOK_URL != ''
        shell: pwsh
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          $msg = @{content='Backend health check FAILED on self-hosted runner'} | ConvertTo-Json
          try { Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK_URL -Method Post -Body $msg -ContentType 'application/json' } catch { Write-Warning $_ }
      
      - name: Prepare release notes snippet
        if: success()
        shell: pwsh
        run: |
          $content = Get-Content HEALTH_CHECK_RESULT.txt -Raw
          "### Backend Health Check\n\nStatus: PASS\n\nSnippet:\n\n$content" | Out-File health-check-summary.md -Encoding UTF8

      - name: Upload health summary artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: health-check-summary
          path: health-check-summary.md

      - name: Append summary to draft release (health-monitor)
        if: success()
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          $owner = ("${{ github.repository }}" -split '/')[0]
          $repo  = ("${{ github.repository }}" -split '/')[1]
            $tag   = 'health-monitor'
          $summary = Get-Content health-check-summary.md -Raw
          $timestamp = (Get-Date).ToString('u')
          $headers = @{ Authorization = "Bearer $env:GITHUB_TOKEN"; 'User-Agent'='health-check-workflow'; Accept='application/vnd.github+json' }
          $releaseUrl = "https://api.github.com/repos/$owner/$repo/releases/tags/$tag"
          try {
            $existing = Invoke-RestMethod -Uri $releaseUrl -Headers $headers -Method Get -ErrorAction Stop
            $id = $existing.id
            $oldBody = $existing.body
            if([string]::IsNullOrWhiteSpace($oldBody)){ $oldBody = "# Health Monitor Release (Draft)" }
            $newSection = "`n## Run $timestamp`n``````json`n$summary`n``````" -replace "``````","```" # ensure fenced triple backticks
            $newBody = $oldBody + $newSection
            $patch = @{ body = $newBody } | ConvertTo-Json -Depth 4
            Invoke-RestMethod -Uri "https://api.github.com/repos/$owner/$repo/releases/$id" -Headers $headers -Method Patch -Body $patch | Out-Null
            Write-Host "Updated existing draft release with new health summary." -ForegroundColor Green
          } catch {
            Write-Host "Existing release not found. Creating new draft release." -ForegroundColor Yellow
            $createBody = @{ tag_name=$tag; name='Health Monitor'; draft=$true; body = "# Health Monitor Release (Draft)`n## Run $timestamp`n```json`n$summary`n```" } | ConvertTo-Json -Depth 4
            Invoke-RestMethod -Uri "https://api.github.com/repos/$owner/$repo/releases" -Headers $headers -Method Post -Body $createBody | Out-Null
            Write-Host "Created draft release with initial summary." -ForegroundColor Green
          }

# Production Docker Compose for Lore Engine Multi-Agent System
version: '3.8'

services:
  # Lore Dispatcher Service
  lore-dispatcher:
    build:
      context: .
      dockerfile: Dockerfile.lore-dispatcher
    container_name: lore-dispatcher-prod
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=production
      - LORE_DISPATCHER_PORT=8081
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - TIKTOK_WEBHOOK_URL=${TIKTOK_WEBHOOK_URL}
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lore-network

  # Conflict Detection Service
  conflict-detection:
    build:
      context: .
      dockerfile: Dockerfile.conflict-detection
    container_name: conflict-detection-prod
    ports:
      - "8083:8083"
    environment:
      - NODE_ENV=production
      - CONFLICT_API_PORT=8083
      - LORE_DISPATCHER_URL=http://lore-dispatcher:8081
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - lore-dispatcher
    networks:
      - lore-network

  # Real-time WebSocket Service
  realtime-ws:
    build:
      context: .
      dockerfile: Dockerfile.realtime
    container_name: realtime-ws-prod
    ports:
      - "8082:8082"
    environment:
      - NODE_ENV=production
      - REALTIME_PORT=8082
      - CONFLICT_API_URL=http://conflict-detection:8083
      - LORE_DISPATCHER_URL=http://lore-dispatcher:8081
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - lore-dispatcher
      - conflict-detection
    networks:
      - lore-network

  # Redis Cache for Production
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./cache/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - lore-network

  # MongoDB for Data Persistence
  mongodb:
    image: mongo:7
    container_name: mongodb-prod
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=lore_engine
    volumes:
      - mongodb-data:/data/db
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - lore-network

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - lore-dispatcher
      - conflict-detection
      - realtime-ws
    restart: unless-stopped
    networks:
      - lore-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - lore-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - lore-network

networks:
  lore-network:
    driver: bridge

volumes:
  redis-data:
  mongodb-data:
  prometheus-data:
  grafana-data:
